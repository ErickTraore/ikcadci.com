{"remainingRequest":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/var/www/html/ikcadci.com/frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/ikcadci.com/frontend/src/views/Infoseshw-nsw.vue?vue&type=template&id=ef2f74f2&","dependencies":[{"path":"/var/www/html/ikcadci.com/frontend/src/views/Infoseshw-nsw.vue","mtime":1649586670624},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}