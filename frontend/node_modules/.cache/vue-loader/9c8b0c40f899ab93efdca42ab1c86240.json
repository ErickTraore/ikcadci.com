{"remainingRequest":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/ikcadci.com/frontend/src/views/Info-maq-seshw.vue?vue&type=template&id=5d53f850&","dependencies":[{"path":"/var/www/html/ikcadci.com/frontend/src/views/Info-maq-seshw.vue","mtime":1649591148826},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}