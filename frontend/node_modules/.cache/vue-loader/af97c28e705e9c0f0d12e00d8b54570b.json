{"remainingRequest":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/ikcadci.com/frontend/src/views/Formation-diplomante.vue?vue&type=template&id=0cea7602&","dependencies":[{"path":"/var/www/html/ikcadci.com/frontend/src/views/Formation-diplomante.vue","mtime":1649819204079},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJwcm9qIj4KICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9tYXF1ZXR0ZS9tYXEtZ2xlL21hcS0xLnBuZyIgYWx0PSLwn5iNIiBjbGFzcz0icHJvai1wcmV2LS1waWMiPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJwcm9qIj4KICAgICAgICA8ZGl2IGNsYXNzPSJwcm9qZm9ybWF0aW9uIj4KICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IEBjbGljaz0iaXNTaG93aW5nR2xlIF49IHRydWUiPkRvY3VtZW50YXRpb24tZm9ybWF0aW9uPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLSA8ZGl2IHYtc2hvdz0iaXNTaG93aW5nR2xlIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9qLWZyYW1lIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9ImlzU2hvd2luZ09uZSBePSB0cnVlIj4xICBNb3RpdmF0aW9uIGV0IGZpbmFsaXTDqTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtc2hvdz0iaXNTaG93aW5nT25lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+TOKAmUluc3RpdHV0IEtlbWV0bWFhdCBDaGVpa2ggQW50YSBEaW9wIGVzdCB1biBkw6lwYXJ0ZW1lbnQgZGUgbOKAmUFzc29jaWF0aW9uIEtlbWV0bWFhdCBvdXZlcnQgZGVwdWlzIDIwMTIuIEzigJlhc3NvY2lhdGlvbiBlc3QgYWZmaWxpw6llIMOgIGzigJlvcmdhbmlzYXRpb24gY29tbXVuYXV0YWlyZSBBZnJvY2VudHJpY2l0eSBJbnRlcm5hdGlvbmFsIDsgbGFxdWVsbGUgZXN0IHByw6lzZW50ZSBkYW5zIHVuZSBjaW5xdWFudGFpbmUgZGUgcGF5cyBkdSBjb250aW5lbnQgZXQgZGUgbGEgZGlhc3BvcmEuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkRhbnMgbGUgY2FkcmUgZHUgY291cmFudCBkZSBsYSByZW5haXNzYW5jZSBhZnJpY2FpbmUgcXVpIG1vbnRlIGVuIHB1aXNzYW5jZSwgbOKAmUlLQ0FEIHPigJllc3QgZG9ubsOpIHBvdXIgdm9jYXRpb24gZGUgZm9ybWVyIGxlcyBmdXR1cnMgY2FkcmVzIGV0IGFjdGV1cnMgZGUgY2V0dGUgcsOpdm9sdXRpb24gY3VsdHVyZWxsZS4KICAgICAgICAgICAgICAgICAgICAgICAgICBBdXNzaSBs4oCZSUtDQUQgcHJvcG9zZSBhdXggamV1bmVzIGFmcmljYWlucyBldCBhZnJpY2FpbmVzIHVuIHByb2dyYW1tZSBk4oCZZW5zZWlnbmVtZW50IGV0IGRlIHJlY2hlcmNoZSBkZSBzZXNodyBldCBTZXNodyBOc3cgZGUga2FtaXRvbG9naWUgZW4gbGlnbmUuPC9wPjxwPgogICAgICAgICAgICAgICAgICAgICAgICAgIExlIFNlc2h3IGVzdCB1biBncmFkZSBk4oCZZW5zZWlnbmVtZW50IHN1cMOpcmlldXIgZGUgbOKAmUlLQ0FEIGFjcXVpcyBhdSB0ZXJtZSBk4oCZdW4gcGFyY291cnMgZGUgNCBzZW1lc3RyZXMgYWNhZMOpbWlxdWVzIGTigJnDqXR1ZGVzLiBJbCBlc3QgbOKAmcOpcXVpdmFsZW50IGR1IE1hc3RlciBkYW5zIGxlIHN5c3TDqG1lIMOpZHVjYXRpZiBvZmZpY2llbC4KICAgICAgICAgICAgICAgICAgICAgICAgICBMZSBTZXNodyBOc3cgZXN0IHVuIGdyYWRlIGTigJllbnNlaWduZW1lbnQgc3Vww6lyaWV1ciBkZSBs4oCZSUtDQUQgYWNxdWlzIGF1IHRlcm1lIGTigJl1biBwYXJjb3VycyBkZSA0IHNlbWVzdHJlcyBhY2Fkw6ltaXF1ZXMgZOKAmcOpdHVkZXMgZXQgZGUgcmVjaGVyY2hlIGFwcsOocyBs4oCZb2J0ZW50aW9uIGR1IFNlc2h3LiBJbCBlc3QgbOKAmcOpcXVpdmFsZW50IGR1IERvY3RvcmF0IGRhbnMgbGUgc3lzdMOobWUgw6lkdWNhdGlmIG9mZmljaWVsLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5MZSBzZWJhIGVzdCB1biBjZXJ0aWZpY2F0IGTDqWxpdnLDqSBkYW5zIGxlIGNhZHJlIGR1IHByb2dyYW1tZSBhdXggcGVyc29ubmVzIGF5YW50IHZhbGlkw6llcyAxIGNvdXJzIHNlbWVzdHJpZWwgZOKAmXVuIHZvbHVtZSBob3JhaXJlIGRlIDI0IGhldXJlcy48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TGEga2FtaXRvbG9naWUgZXN0IGxlIGRvbWFpbmUgZGVzIMOpdHVkZXMgYWZyaWNhaW5lcyBjb25kdWl0ZXMgZGFucyB1bmUgcGVyc3BlY3RpdmUgYWZyaWNhaW5lLiBJbCBz4oCZYWdpdCBkZSBs4oCZYXBwbGljYXRpb24gZGUgbGEgdGjDqW9yaWUgZGUgbOKAmWFmcm9jZW50cmljaXTDqSwgZm9uZMOpZSBwYXIgbGUgcHJvZmVzc2V1ciBLZXRlIEFzYW50ZSwgZGFucyBsZSBjaGFtcCDDqXBpc3TDqW1vbG9naXF1ZS4gTGUgcHJvZmVzc2V1ciBBbWEgTWF6YW1hIGdyYW5kZSBmaWd1cmUgZGUgbOKAmcOpY29sZSBkZSBs4oCZYWZyb2NlbnRyaWNpdMOpIGVzdCBsYSBjb25jZXB0cmljZSBkZSBjZSBwcm9ncmFtbWUgYWNhZMOpbWlxdWUgZGUga2FtaXRvbG9naWUgZGUgaGF1dCBuaXZlYXUgZG9udCBsYSBtaXNlIGVuIMWTdXZyZSBlc3QgYXNzdXLDqWUsIHNvdXMgc2EgZGlyZWN0aW9uLCBwYXIgdW5lIMOpcXVpcGUgcMOpZGFnb2dpcXVlIHF1YWxpZmnDqWUuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkzigJllbmpldSBkZSBjZSBwcm9ncmFtbWUgZXN0IGRlIGNvbnRyaWJ1ZXIgw6AgbGEgcmVuYWlzc2FuY2UgY3VsdHVyZWxsZSBkZXMgcGV1cGxlcyBuw6lncm8tYWZyaWNhaW5zIHRlbGxlIHF1ZSBsYSBkw6lmaW5pZSBsZSBzYXZhbnQgQ2hlaWtoIEFudGEgRGlvcCA6PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPsKrIExlcyBub3V2ZWxsZXMgaHVtYW5pdMOpcyBhZnJpY2FpbmVzIGRldnJvbnQgcmVwb3NlciBzdXIgbGVzIGZvbmRlbWVudHMgZGUgbGEgY3VsdHVyZSDDqWd5cHRvLW51Ymllbm5lIGRlIG3Dqm1lIHF1ZSBsZXMgaHVtYW5pdMOpcyBvY2NpZGVudGFsZXMgc+KAmWFwcHVpZW50IHN1ciBsYSBjdWx0dXJlIGdyw6ljbyAtIGxhdGluZSBhbnRpcXVlLiBTYW5zIHLDqWbDqXJlbmNlIHN5c3TDqW1hdGlxdWUgw6AgbOKAmUVneXB0ZSBkYW5zIHRvdXMgbGVzIGRvbWFpbmVzIGRlIGxhIGN1bHR1cmUsIGlsIG5lIHNlcmEgcGFzIHBvc3NpYmxlIGRlIGLDonRpciB1biBjb3JwcyBkZSBzY2llbmNlcyBodW1haW5lcyAuLi4gaWwgc+KAmWFnaXQgZGUgbGEgcmVkw6ljb3V2ZXJ0ZSBk4oCZdW4gc29pIGN1bHR1cmVsIGV0IG5vbiBk4oCZdW5lIGltaXRhdGlvbiBzZXJ2aWxlIMK7LjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5DSEVJS0ggQU5UQSBESU9QIChBbGVydGUgc291cyBsZXMgdHJvcGlxdWVzLCBwcsOpc2VuY2UgYWZyaWNhaW5lLCBFZGl0aW9uIDE5OTApLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5MYSBjcsOpYXRpb24gZGUgY2UgcHJvZ3JhbW1lIGVzdCB1bmUgZXhwcmVzc2lvbiBjb25jcsOodGUgZGUgbGEgdm9sb250w6kgZGVzIGFmcmljYWlucyBjb25zY2llbnRzIGRlIHPigJlhZmZyYW5jaGlyIGR1IGNhcmNhbiBpbnN0aXR1dGlvbm5lbCBkZSBs4oCZZXVyb2NlbnRyaXNtZSBldCBkZSBjcsOpZXIgdW4gY2FkcmUgYWZyb2NlbnRyaXF1ZSBk4oCZZW5zZWlnbmVtZW50IGV0IGRlIHJlY2hlcmNoZSBzdXDDqXJpZXVyLiBJbCBz4oCZYWdpdCBkZSByb21wcmUgYXZlYyB0b3V0ZXMgbGVzIGZvcm1lcyBkZSB0dXRlbGxlcyBpbnRlbGxlY3R1ZWxsZXMgZXQgYWNhZMOpbWlxdWVzIMOpdHJhbmfDqHJlcyBow6lyaXTDqWVzIGRlIGxhIHDDqXJpb2RlIGRlcyBkw6lwb3J0YXRpb25zIGV0IGRlIGxhIGNvbG9uaXNhdGlvbiBldCBk4oCZYWZmaXJtZXIgbGEgcHLDqXNlbmNlIGV0IGxhIHZpdGFsaXTDqSBkZSBsYSBwZW5zw6llLCBkZXMgc2NpZW5jZXMsIGRlcyB0ZWNobmlxdWVzIGV0IGRlcyBhcnRzIG7DqWdyby1hZnJpY2FpbnMgKGthbWl0KSBkYW5zIGxlIG1vbmRlIGTigJlhdWpvdXJk4oCZaHVpLiBMZXMgZGlwbMO0bWVzIGRlIGzigJlJS0NBRCBzb250IGRvbmMgZGVzIGRpcGzDtG1lcyBsaWJyZXMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvai1mcmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPSJpc1Nob3dpbmdUd28gXj0gdHJ1ZSI+MiBGaW5hbGl0w6k8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LXNob3c9ImlzU2hvd2luZ1R3byI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+SWwgc+KAmWFnaXQgdGVjaG5pcXVlbWVudCBkZSBkb3RlciBs4oCZw6l0dWRpYW50IGTigJl1biBpbXBvcnRhbnQgYmFnYWdlIGludGVsbGVjdHVlbCBwYXIgdW5lIGZvcm1hdGlvbiBkZSBiYXNlIHBsdXJpZGlzY2lwbGluYWlyZSBxdWkgYXNzb2NpZSBwcmluY2lwYWxlbWVudCBsZXMgZG9tYWluZXMgZGVzIGxhbmd1ZXMsIGRlIGzigJloaXN0b2lyZSwgZGVzIGxldHRyZXMsIGRlIGxhIHBoaWxvc29waGllLCBkZSBsYSBjb3Ntb2xvZ2llLCBkZSBsYSBzb2Npb2xvZ2llLCBkZSBs4oCZYXJ0IGRhbnMgdW4gcGFyYWRpZ21lIGF1dG9yw6lmw6lyZW5jw6kgYWZyaWNhaW4uPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkdyYWNlIMOgIGzigJnDqXR1ZGUgZGUgY2VzIGdyYW5kZXMgZGlzY2lwbGluZXMgZGFucyB1bmUgYXBwcm9jaGUgYWZyb2NlbnRyaXF1ZSwgbOKAmWFwcHJlbmFudCBhY3F1aWVydCBkZSBzb2xpZGVzIG3DqXRob2RlcyBkZSB0cmF2YWlsLCB1bmUgZ3JhbmRlIGN1bHR1cmUgZ8OpbsOpcmFsZSwgdW5lIGNsYWlyZSBjb25zY2llbmNlIGhpc3RvcmlxdWUsIHVuIGFtb3VyIHBvdXIgbGUgc2VydmljZSDDoCBs4oCZQWZyaXF1ZSwgdW4gZ3JhbmQgc2VucyBjcml0aXF1ZSBldCB1biBzZW5zIGNyw6lhdGlmIHRyw6hzIGltcG9ydGFudC48L3A+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9qLWZyYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz0iaXNTaG93aW5nVHJlZSBePSB0cnVlIj4zIFB1YmxpYyBjaWJsZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LXNob3c9ImlzU2hvd2luZ1RyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxlIHByb2dyYW1tZSBz4oCZYWRyZXNzZSwgZW4gZm9ybWF0aW9uIGluaXRpYWxlLCDDoCBkZXMgw6l0dWRpYW50cyBkZSBuaXZlYXUgbGljZW5jZSBkdSBzeXN0w6htZSBvZmZpY2llbCBk4oCZZW5zZWlnbmVtZW50IGTDqXNpcmV1eCBk4oCZYWNxdcOpcmlyIHVuZSBzcMOpY2lhbGl0w6kgcHJvZmVzc2lvbm5lbGxlIG91IHJlY2hlcmNoZSBkYW5zIHVuZSBwZXJzcGVjdGl2ZSBhZnJvY2VudHJpcXVlLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5JbCBz4oCZYWdpdCBwb3VyIGV1eCBkZSBwb3Vyc3VpdnJlIGxldXJzIMOpdHVkZXMgc3Vww6lyaWV1cmVzIHRvdXQgZW4gc2UgcmVjb252ZXJ0aXNzYW50IGF1IHBhcmFkaWdtZSBww6lkYWdvZ2lxdWUgYWZyb2NlbnRyaXF1ZS48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RW4gZm9ybWF0aW9uIGNvbnRpbnVlLCBsZSBwcm9ncmFtbWUgZGUga2FtaXRvbG9naWUgb2ZmcmUgbOKAmW9wcG9ydHVuaXTDqSDDoCBkZXMgcHJvZmVzc2lvbm5lbHMgZXQgw6AgZGVzIGNoZXJjaGV1cnMgZGUgc2UgcmVjb252ZXJ0aXIgZGFucyBsYSBub3V2ZWxsZSDDqWNvbm9taWUgZGUgbGEgcmVuYWlzc2FuY2UgYWZyaWNhaW5lLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvai1mcmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9ImlzU2hvd2luZ0ZvciBePSB0cnVlIj40IExlcyBkaXBsw7RtZXMgZXQgcGVyc3BlY3RpdmUgZOKAmWVtcGxvaWU8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1zaG93PSJpc1Nob3dpbmdGb3IiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkRhbnMgcXVlbHF1ZXMgYW5uw6llcyBs4oCZQWZyaXF1ZSBzZXJhIGxhIHByZW1pw6hyZSBwdWlzc2FuY2UgZMOpbW9ncmFwaGlxdWUgbW9uZGlhbGUuIENldHRlIG1vbnTDqWUgZW4gcHVpc3NhbmNlIHPigJlhY2NvbXBhZ25lcmEgZOKAmXVuZSBtb250w6llIGRlIGxhIGNvbnNjaWVuY2UgcG9zaXRpdmUgZGUgbOKAmUFmcmlxdWUuIENlIHBow6lub23DqG5lIGTDqWrDoCBwYWxwYWJsZSBzdXNjaXRlcmEgZGVzIGRlbWFuZGVzIHF14oCZaWwgZmF1dCBwb3V2b2lyIGFudGljaXBlciBldCBhdXhxdWVsbGVzIG9uIGRvaXQgc2UgcHLDqXBhcmVyIMOgIHLDqXBvbmRyZS4gUGFyIGV4ZW1wbGUgZGFucyBsZSBkb21haW5lIMOpZHVjYXRpZiBpbCBmYXVkcmEgZGVzIGVuc2VpZ25hbnRzIMOpcXVpcMOpcyBkZSBzb2xpZGVzIGNvbm5haXNzYW5jZXMgZGUgbOKAmWhpc3RvaXJlIGV0IGRlIGxhIGN1bHR1cmUgZXQgZGVzIGxhbmd1ZXMgZGUgbm90cmUgY29udGluZW50LiBUb3VzIGxlcyBkb21haW5lcyBkZSBs4oCZZXhpc3RlbmNlIHNvbnQgY29uY2VybsOpcyA7IGxhIHBvbGl0aXF1ZSwgbOKAmcOpY29ub21pZSwgbOKAmWFyY2hpdGVjdHVyZSwgbGVzIGFydHMgY3LDqWF0aWZzIGV0Yy4gTGVzIGTDqWJvdWNow6lzIGRlcyBmb3JtYXRpb25zIGRlIGzigJlJS0NBRCBzb250IGNlbGxlcyBvZmZlcnRlcyBwYXIgY2VzIHByb21ldHRldXNlcyBwZXJzcGVjdGl2ZXMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxlcyBkaXBsw7RtZXMgZGUgbOKAmUlLQ0FEIHNvbnQgcGFyIGNvbnPDqXF1ZW50IG5vdmF0ZXVycyBldCB1bmlxdWVzIGF1IG1vbmRlIGNhciBpbHMgYW50aWNpcGVudCBzdXIgbGEgc29jacOpdMOpIHBhbmFmcmljYWluZSBkZSBkZW1haW4uPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxlcyBkaXBsw7RtZXMgZGUgbOKAmUlLQ0FEIHNvbnQgcGFyIGNvbnPDqXF1ZW50IG5vdmF0ZXVycyBldCB1bmlxdWVzIGF1IG1vbmRlIGNhciBpbHMgYW50aWNpcGVudCBzdXIgbGEgc29jacOpdMOpIHBhbmFmcmljYWluZSBkZSBkZW1haW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExlcyBkw6lib3VjaMOpcyBzb250IGZvbmN0aW9ucyBkZXMgc3DDqWNpYWxpdMOpcyBkdSBTZXNoc3cgZXQgZHUgU2VzaHcgTnN3IDogY3LDqWF0ZXVycyBk4oCZw6ljb2xlcyBhZnJvY2VudHJpcXVlcywgZW5zZWlnbmFudHMgZXQgZm9ybWF0ZXVycywgZm9ybWF0ZXVycyBkZSBmb3JtYXRldXJzLCBJbmfDqW5pZXVyIGRlIGZvcm1hdGlvbiwgcmVzcG9uc2FibGUgZHUgZGlzcG9zaXRpZiBkZSBmb3JtYXRpb24sIGNyw6lhdGV1cnMgZOKAmWVudHJlcHJpc2VzIG91IGTigJlhY3Rpdml0w6lzIMOpY29ub21pcXVlcyBhZnJvY2VudHLDqWVzLCBsZWFkZXJzIGTigJlhc3NvY2lhdGlvbnMgY2l2aWxlcyBvdSBwb2xpdGlxdWVzLCBwaGlsb3NvcGhlcywgdGjDqW9sb2dpZW4ga2FtaXQsIGNoZXJjaGV1ciBlbiBhZnJvbG9naWUsIGhpc3RvcmllbiBkZSBs4oCZYXJ0LCBoaXN0b3JpZW4sIGNvbmbDqXJlbmNpZXIsIGNvbW11bmljYXRpb24sIHNvY2lvbG9ndWUsIGpvdXJuYWxpc3RlLCBnw6lvc3RyYXTDqGdlLCBjb25zdWx0YW50IGV0IGNvbnNlaWxsw6kgc3BlY2lhbGlzw6kuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9qLWZyYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz0iaXNTaG93aW5nRml2ZSBePSB0cnVlIj41IExlIGRpc3Bvc2l0aWYgZGUgZm9ybWF0aW9uIG91dmVydGUgw6AgZGlzdGFuY2U8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1zaG93PSJpc1Nob3dpbmdGaXZlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5MZXMgY291cnMgc29udCBwcm9wb3PDqXMgc3VyIHVuIGZvcm1hdCBlbiBsaWduZSBzdHJpY3QuIFRvdXRlcyBsZXMgY29uZsOpcmVuY2VzIHNvbnQgw6lsZWN0cm9uaXF1ZXMgZXQgc29udCBhY2Nlc3NpYmxlcyBwYXIgb3JkaW5hdGV1ci48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TGEgcGxhdGUtZm9ybWUgbnVtw6lyaXF1ZSBkZSBs4oCZSUtDQUQgdXRpbGlzZSA0IG91dGlscyBwcmluY2lwYXV4IDo8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+LSBVbmUgYXBwbGljYXRpb24gZGUgZm9ybWF0aW9uIGVuIGxpZ25lIG/DuSBzb250IGRpc3BvbmlibGVzIGxhIHZpZMOpbywgbGUgbWFudWVsIGV0IGxlcyBleGVyY2ljZXMgY2xhc3PDqXMgcGFyIHPDqXF1ZW5jZSBww6lkYWdvZ2lxdWUuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPi0gVW5lIGFwcGxpY2F0aW9uIHBvdXIgbGVzIHPDqWFuY2VzIGRlIHdlYmNvbmbDqXJlbmNlcyBlbiBsaXZlPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPi0gVW4gZ3JvdXBlIFdoYXRzQXBwIHF1aSByZWdyb3VwZSBsZXMgw6l0dWRpYW50cyBk4oCZdW5lIG3Dqm1lIGNsYXNzZSBldCBsZXVycyBmb3JtYXRldXJzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4tIFVuZSBib2l0ZSBHbWFpbCBwb3VyIGxlcyBjb3JyZXNwb25kYW5jZXMgZW50cmUgZm9ybWF0ZXVycyBldCBhdWRpdGV1cnMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxlcyBjb3VycyBleGlnZW50IHVuZSBsZWN0dXJlIGludGVuc2l2ZSBldCBsZXMgw6l0dWRpYW50cyBkb2l2ZW50IMOqdHJlIHByw6p0cyDDoCDDqWNyaXJlIG91IMOgIGRpc2N1dGVyIGFwcsOocyBhdm9pciBsdSBsZXMgdGV4dGVzIHJlcXVpcy4gTGVzIGVuc2VpZ25hbnRzIGF0dHJpYnVlcm9udCBub3JtYWxlbWVudCBkZXMgbGVjdHVyZXMgZXQgY2VsbGVzLWNpIHNlcm9udCBkaXNjdXTDqWVzLCBkw6liYXR0dWVzLCBjcml0aXF1w6llcyBkZSBtYW5pw6hyZSBjb25zdHJ1Y3RpdmUgZXQgw6l2YWx1w6llcyBkYW5zIGxlIGNvbnRleHRlIGFmcm9jZW50cmlxdWUuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9qLWZyYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz0iaXNTaG93aW5nU2l4IF49IHRydWUiPjYgTGEgZGlyZWN0aW9uIGR1IHByb2dyYW1tZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LXNob3c9ImlzU2hvd2luZ1NpeCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TGUgcHJvZ3JhbW1lIGTigJnDqXR1ZGVzIHN1cMOpcmlldXJlcyBlbiDDqXR1ZGVzIGFmcmljYWluZXMgU2VzaHcgZXQgU2VzaHcgTnN3IGVzdCBkaXJpZ8OpIHBhciBsZSBwcm9mZXNzZXVyIEFtYSBNYXphbWEgOyDCqyBJbXkgciBTZWJheXQgwrsgKGRpcmVjdHJpY2UgZGUgbOKAmWVuc2VpZ25lbWVudCkgw6AgbOKAmUlLQ0FELiBBIGNlIHRpdHJlIGVsbGUgc2nDqGdlIMOgIHRvdXMgbGVzIGNvbWl0w6lzIGRlIHRow6hzZSBkZSBs4oCZSUtDQUQuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkVsbGUgZXN0IGRvY3RldXJlIGVuIGxpbmd1aXN0aXF1ZSDDoCBs4oCZVW5pdmVyc2l0w6kgZGUgbGEgU29yYm9ubmUgTm91dmVsbGUuIEVsbGUgZXN0IHByb2Zlc3NldXJlIGTigJlFdHVkZXMgQWZyaWNhaW5lcyBhdXggVVNBLiBFbGxlIGEgcHVibGnDqSBkZSBub21icmV1eCBvdXZyYWdlcyBldCBhcnRpY2xlcyBlbiBmcmFuw6dhaXMgZXQgZW4gYW5nbGFpcyBzdXIgbOKAmUFmcm9jZW50cmljaXTDqS4gRWxsZSBhIG5vdGFtbWVudCBjb8OpZGl0w6kgbOKAmUVuY3ljbG9ww6lkaWUgZGVzIMOpdHVkZXMgbm9pcmVzIGV0IGzigJlFbmN5Y2xvcMOpZGllIGRlIGxhIHJlbGlnaW9uIGFmcmljYWluZS48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RWxsZSBwb3Nzw6hkZSB1bmUgZ3JhbmRlIGV4cMOpcmllbmNlIGRhbnMgbGEgZGlyZWN0aW9uIGRlcyBkb2N0b3JhdHMgZW4gw6l0dWRlcyBhZnJpY2FpbmVzIC1hbcOpcmljYWluZXMuIFNlcyDDqXR1ZGlhbnRzIG9udCDDqXTDqSBjaXTDqXMgcG91ciBsZXVyIMOpcnVkaXRpb24gZXQgbGV1ciBsZWFkZXJzaGlwIGRhbnMgbGUgZG9tYWluZSBkZXMgw6l0dWRlcyBBZnJpY2FpbmVzIHBhciBkZXMgcmV2dWVzIGV0IGRlcyBpbnN0aXR1dGlvbnMgZGVwdWlzIHBsdXMgZGUgZGV1eCBkw6ljZW5uaWVzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5M4oCZSW15IHIgU2ViYXl0IGNvbmR1aXQgdW5lIMOpcXVpcGUgZOKAmWVuc2VpZ25hbnRzIGV0IGRlIGNoZXJjaGV1cnMgdG91cyBjb21ww6l0ZW50cyBlbiBrYW1pdG9sb2dpZSBkYW5zIGxldXIgc3DDqWNpYWxpdMOpIHJlc3BlY3RpdmUuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9qLWZyYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz0iaXNTaG93aW5nU2V2ZW4gXj0gdHJ1ZSI+NyBPcmdhbmlzYXRpb24gZXQgY29udGVudSBkZSBsYSBmb3JtYXRpb248L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1zaG93PSJpc1Nob3dpbmdTZXZlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TGUgcHJvZ3JhbW1lIHNlIGTDqXJvdWxlIHN1ciA4IHNlbWVzdHJlcyByw6lwYXJ0aXMgZW4gZGV1eCBjeWNsZXMuIENoYXF1ZSBmaW4gZGUgY3ljbGUgZXN0IHNhbmN0aW9ubsOpZSBwYXJ1biBkaXBsw7RtZS48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UHJlbWllciBjeWNsZSBkZSBrYW1pdG9sb2dpZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4gQXUgdGVybWUgZGVzIDQgcHJlbWllcnMgc2VtZXN0cmVzIChjeWNsZSAxKSwgbFzigJnDqXR1ZGlhbnQgZG9pdCBhdm9pciB1bmUgYm9ubmUgY29ubmFpc3NhbmNlIGRlcyB0aMOpb3JpZXMgZXQgbcOpdGhvZGVzIGFmcm9jZW50cmlxdWVzLCBkZSBs4oCZaGlzdG9pcmUgZXQgbGEgY2l2aWxpc2F0aW9uIGFmcmljYWluZSwgZGUgbGEgbGFuZ3VlIGNsYXNzaXF1ZSBhZnJpY2FpbmUgKG1kdyBudHIpLCBkZSBsYSBsaW5ndWlzdGlxdWUgaGlzdG9yaXF1ZSBhZnJpY2FpbmUsIGRlIGxhIHBoaWxvc29waGllIGFmcmljYWluZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYSBmaW4gZHUgY3ljbGUgMSBlc3Qgc2FuY3Rpb25uw6kgcGFyIGxlIHRpdHJlIGRlIFNlc2ggKE1hc3RlcikuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkRldXhpw6htZSBjeWNsZSBkZSBrYW1pdG9sb2dpZTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5MZSBjeWNsZSAyIGNvbXByZW5kIDQgc2VtZXN0cmVzLiBJbCBlc3QgY2VudHLDqSBzdXIgbGEgZm9ybWF0aW9uIGV0IGxhIHByYXRpcXVlIMOgIGxhIHJlY2hlcmNoZSBkYW5zIGxhIHNww6ljaWFsaXTDqSBjaG9pc2llIHBhciBs4oCZw6l0dWRpYW50LjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5MZSBTZXNodyBOc3cgKGRvY3RvcmF0KSBlc3QgZMOpbGl2csOpIMOgIGzigJlpc3N1ZSBkZSBsYSBwcsOpc2VudGF0aW9uIGRlIGxhIHRow6hzZSBkZSBmaW4gZOKAmcOpdHVkZXMuIExlIGN5Y2xlIDIgZXN0IHNhbmN0aW9ubsOpIHBhciBsZSB0aXRyZSBkZSBTZXNoIE5zdyAoRG9jdGV1cikuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9qLWZyYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz0iaXNTaG93aW5nSGVpZ3RoIF49IHRydWUiPjggUHJvZ3JhbW1lPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtc2hvdz0iaXNTaG93aW5nSGVpZ3RoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QUk9HUkFNTUUgREUgU0VTSCBOU1cgKERPQ1RPUkFUKSBFTiBLQU1JVE9MT0dJRSAyMDIyLTIwMjU8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkN5Y2xlIDEgU0VTSFcgKE1BU1RFUik8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHJvd3NwYW49IjMiPlNlbWVzdHJlIDE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5LTVQgNzAwNyBUaMOpb3JpZSBldCBtw6l0aG9kb2xvZ2llIGRlIGzigJlhZnJvY2VudHJpY2l0w6k8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPktNVCA3MDE3IEhpc3RvcmlvZ3JhcGhpZSBkaW9waWVubmU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPktNVCA3MDI3IEluaXRpYXRpb24gw6AgbGEgbGFuZ3VlIGRlcyBNZHcgTnRyOiDDiWNyaXR1cmUgZXQgR3JhbW1haXJlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgcm93c3Bhbj0iMyI+U2VtZXN0cmUgMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPktNVCA3MDM3IExlcyBncmFuZHMgbW91dmVtZW50cyBkZSBsYSBwZW5zw6llIGFmcmljYWluZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+S01UIDcwNDcgUHLDqWhpc3RvaXJlIGV0IEhpc3RvaXJlIGFuY2llbm5lIGRlIGzigJlBZnJpcXVlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5LVE0gNzA1NyBJbml0aWF0aW9uIMOgIGxhIGxhbmd1ZSBkZXMgTWR3IE50cjogRWNyaXR1cmUgZXQgR3JhbW1haXJlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgcm93c3Bhbj0iMyI+U2VtZXN0cmUgMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPktNVCA3MDY3IFNwaXJpdHVhbGl0w6kgZXQgcmVuYWlzLSBzYW5jZSBhZnJpY2FpbmVzPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5LTVQgNzA3NyBIaXN0b2lyZSBldCBjaXZpbGlzYXRpb25zIGRlIGzigJnDqXBvcXVlIGltcMOpcmlhbGU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPktNVCA3MDg3IEluaXRpYXRpb24gw6AgbGEgTGFuZ3VlIGRlcyBNZHcgTnRyIDogQXRlbGllcnMgZGUgTGVjdHVyZSBldCBUcmFkdWN0aW9uIGRlIFRleHRlczwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgcm93c3Bhbj0iMyI+U2VtZXN0cmUgNDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPktNVCA3MDk3IEhpc3RvaXJlIGV0IGN1bHR1cmUgZGUgbGEgZGlhc3BvcmEgYWZyaWNhaW5lPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5LTVQgNzEwNyBMZXMgZ3JhbmRlcyBpbnZhc2lvbnMgZGUgbOKAmUFmcmlxdWU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPktNVCA3MTE3IExhbmd1ZSBQYW4tQWZyaWNhaW5lIE1vZGVybmU6IExlIEtpc3dhaGlsaTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5DeWNsZSAyIFNFU0hXX05TVyAoTUFTVEVSKTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCByb3dzcGFuPSIzIj5TZW1lc3RyZSA1PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPktNVCA3MTI3IFPDqW1pbmFpcmUgZGUgUmVjaGVyY2hlIGVuIEthbWl0b2xvZ2llPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5LTVQgNzEzNyBMaXR0w6lyYXR1cmUgQWZyaWNhaW5lIGV0IERpYXNwb3JpcXVlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5LTVQgNzE0NyBSZWtoIE5lY2hlciBldCBsYSBUcmFkaXRpb24gU2NpZW50aWZpcXVlIEFmcmljYWluZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNlbWVzdHJlIDY8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+S01UIDcxNTcgRWxhYm9yYXRpb24gJiBTb3V0ZW5hbmNlIGR1IE3DqW1vaXJlIGRlIFByw6ktIFRow6hzZSBlbiBLYW1pdG9sb2dpZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2VtZXN0cmUgNzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5LTVQgNzE2NyBFbGFib3JhdGlvbiBkZSBsYSBUaMOoc2UgZW4gS2FtaXRvbG9naWU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNlbWVzdHJlIDg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+S01UIDcxNzcgU291dGVuYW5jZSBkZSBUaMOoc2UgZW4gS2FtaXRvbG9naWU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2otZnJhbWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9ImlzU2hvd2luZ05pbmUgXj0gdHJ1ZSI+OSBBdXRyZXMgYWN0aXZpdMOpcyBhY2Fkw6ltaXF1ZXM8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1zaG93PSJpc1Nob3dpbmdOaW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Q29uZsOpcmVuY2UgYW5udWVsbGUuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5MZXMgZG9jdG9yYW50cyBkb2l2ZW50IHBhcnRpY2lwZXIgYXUgc3ltcG9zaXVtIGFubnVlbCBkZSBs4oCZSUtDQUQgc3VyIGxlcyDDqXR1ZGVzIGFmcmljYWluZXMuIElsIHPigJlhZ2l0IGTigJl1biBzeW1wb3NpdW0gZOKAmXVuZSBqb3VybsOpZSBvw7kgbGVzIGRvY3RvcmFudHMgZGlzY3V0ZW50IGRlIGxldXJzIHJlY2hlcmNoZXMgYXZlYyBsZSBwdWJsaWMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5JbW1lcnNpb24gZGFucyBsZXMgY29tbXVuYXV0w6lzIHZpbGxhZ2VvaXNlcy48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkxlcyDDqXR1ZGlhbnRzIHNvbnQgdGVudXMgZGUgc3VpdnJlIHVuZSBpbW1lcnNpb24gY3VsdHVyZWxsZSBpbnRlbnNpdmUgZGFucyB1biB2aWxsYWdlIGFmcmljYWluLiBMYSBjZXJ0aWZpY2F0aW9uIGRlIGNldHRlIGV4aWdlbmNlIGRvaXQgw6p0cmUgcHLDqXNlbnTDqWUgYXZhbnQgcXVlIGzigJnDqXR1ZGlhbnQgbuKAmWFpdCBvYnRlbnUgc29uIGRpcGzDtG1lIGRlIFNlc2guPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5UaMOoc2UgZGUgU2VzaHcgTnN3LjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TGEgdGjDqHNlIGVzdCB1bmUgw6l0dWRlIGFmcm9jZW50cmlxdWUgb3JpZ2luYWxlIHF1aSBkw6ltb250cmUgbGEgY29ubmFpc3NhbmNlIGRlcyBtw6l0aG9kZXMgZGUgcmVjaGVyY2hlIGV0IHVuZSBtYcOudHJpc2UgZGUgc29uIGRvbWFpbmUgZOKAmWludMOpcsOqdCBwcmluY2lwYWwuIElsIHPigJlhZ2l0IGTigJl1biB0cmF2YWlsIHF1aSBhIGZhaXQgbOKAmW9iamV0IGTigJl1bmUgZW5xdcOqdGUgcmlnb3VyZXVzZSBzb3VzIGxhIHN1cGVydmlzaW9uIGRpcmVjdGUgZOKAmXVuIGVuc2VpZ25hbnQuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5MYSBwbHVwYXJ0IGRlcyBtw6ltb2lyZXMgZmVyb250IGVudHJlIDE3NSBldCAyMjUgcGFnZXMuIFRvdXRlcyBsZXMgdGjDqHNlcyByZXRlbnVlcyBzZXJvbnQgcHVibGnDqWVzIHBhciBs4oCZSUtDQUQuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvai1mcmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPSJpc1Nob3dpbmdUZW4gXj0gdHJ1ZSI+MTAgRMOpcm91bGVtZW50IGRlcyBjb3VyczwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LXNob3c9ImlzU2hvd2luZ1RlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Q2hhcXVlIHPDqWFuY2UgZGUgY291cnMgc2VyYSBk4oCZdW5lIGR1csOpZSAyIGhldXJlcy4gTGVzIMOpdHVkaWFudHMgaW5zY3JpdHMgcHJlbmRyb250IDMgY291cnMgcGFyIHNlbWVzdHJlLiBFbiBk4oCZYXV0cmVzIHRlcm1lcyBjZWNpIMOpcXVpdmF1dCDDoCB1biB2b2x1bWUgaG9yYWlyZSBkZSA3MiBoZXVyZXMgZOKAmWVuc2VpZ25lbWVudCBwYXIgc2VtZXN0cmUuIExhIHDDqXJpb2RlIGVudHJlIGxlcyBkZXV4IHNlbWVzdHJlcyBlc3QgcsOpc2VydsOpZSBhdXggdHJhdmF1eCBwZXJzb25uZWxzLCBjb25mw6lyZW5jZXMgZXQgYXV0cmVzIGFjdGl2aXTDqXMgYWNhZMOpbWlxdWVzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2otZnJhbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPSJpc1Nob3dpbmdFbGV2ZW4gXj0gdHJ1ZSI+MTEgTGVzIGZvcm1hbGl0w6lzIGTigJlhZG1pc3Npb25zIGF1eCBjeWNsZXMgZHUgcHJvZ3JhbW1lPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtc2hvdz0iaXNTaG93aW5nRWxldmVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5MZXMgw6l0dWRpYW50cyBzb250IGFkbWlzIGRldXggZm9pcyBwYXIgYW4uIExhIGRhdGUgbGltaXRlIGRlIHByw6lzZW50YXRpb24gZGVzIGRlbWFuZGVzIHBvdXIgbGUgcHJlbWllciBzZW1lc3RyZSAyMDIyIGVzdCBsZSAzMSBkw6ljZW1icmUgMjAyMSBwb3VyIHVuZSByZW50csOpZSBxdWkgc2UgZmVyYSBmaW4gamFudmllci4gTGEgZGF0ZSBsaW1pdGUgZGUgcHLDqXNlbnRhdGlvbiBkZXMgZGVtYW5kZXMgcG91ciBsZSBkZXV4acOobWUgc2VtZXN0cmUgMjAyMiBlc3QgbGUgMzAganVpbiAyMDIyIHBvdXIgdW5lIHJlbnRyw6llIHF1aSBzZSBmZXJhIGTDqWJ1dCBKdWlsbGV0IDIwMjIuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkzigJnDqXR1ZGlhbnQgZG9pdCBqdXN0aWZpZXIgdW4gbml2ZWF1IGRlIGZvcm1hdGlvbiB1bml2ZXJzaXRhaXJlIMOpcXVpdmFsZW50IMOgIGxhIGxpY2VuY2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENlcGVuZGFudCBs4oCZYWRtaXNzaW9uIHBldXQgc2UgZmFpcmUgw6AgbGEgc3VpdGUgZOKAmXVuIGVudHJldGllbiBk4oCZw6l2YWx1YXRpb24gZXQgc3VyIGxhIGJhc2UgZOKAmXVuIGRvc3NpZXIgw6AgZm91cm5pci48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TGVzIMOpdHVkaWFudHMgdGl0dWxhaXJlcyBkZXMgY2VydGlmaWNhdHMgYWZyb2xvZ2lxdWVzIGRlIGzigJlJS0NBRCBwZXV2ZW50IMOqdHJlIGRpc3BlbnPDqSBkZSBjZXJ0YWlucyBlbnNlaWduZW1lbnRzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Ub3VzIGxlcyByZW5zZWlnbmVtZW50cyBzdXIgbOKAmWluc2NyaXB0aW9uIHBldXZlbnQgw6p0cmUgb2J0ZW51cyBhdXByw6hzIGR1IGNvb3JkaW5hdGV1ciBkZSBs4oCZSUtDQUQgb3UgZGUgc29uIHNlY3LDqXRhcmlhdC48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9qLWZyYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz0iaXNTaG93aW5nVHdlbHZlIF49IHRydWUiPjEyIExlIHBsYW5uaW5nPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtc2hvdz0iaXNTaG93aW5nVHdlbHZlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5MZSBwbGFubmluZyBkdSBwcmVtaWVyIHNlbWVzdHJlIDIwMjIgZXN0IGRpc3BvbmlibGUgYXVwcsOocyBkdSBzZWNyw6l0YXJpYXQuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PiAtLT4KICAgICAgICA8L2Rpdj4gCiAgICAgICAgPGRpdiBjbGFzcz0icHJvamluc2NyaXB0aW9uIj4KICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IEBjbGljaz0iaXNTaG93aW5nRmluYWxlIF49IHRydWUiPkluc2NyaXB0aW9uLWZvcm1hdGlvbjwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgdi1zaG93PSJpc1Nob3dpbmdGaW5hbGUiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9qLWZyYW1lIj5GaWNoZSBkJ2luc2NyaXB0aW9uLjwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo="},null]}