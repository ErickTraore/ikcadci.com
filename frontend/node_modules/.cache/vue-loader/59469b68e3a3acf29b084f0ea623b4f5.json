{"remainingRequest":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/var/www/html/ikcadci.com/frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/ikcadci.com/frontend/src/views/Page-formation.vue?vue&type=template&id=01cf8d02&","dependencies":[{"path":"/var/www/html/ikcadci.com/frontend/src/views/Page-formation.vue","mtime":1649909227335},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ikcadci.com/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}